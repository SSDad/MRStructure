clearvars

folder_nonVG = 'VG';

% mat folder
folder_matData = '\\storage1.ris.wustl.edu\taehokim\Active\Lab\Zhen\MRStructure\matData';
path_matData_nonVG = fullfile(folder_matData, folder_nonVG);
if ~exist(path_matData_nonVG, 'dir')
    mkdir(path_matData_nonVG);
end

% patient table
fn = ['PatientTable_', folder_nonVG];    
load(fn)

nF = size(T_Patient, 1);
FileName_Struct = cell(nF, 1);
Path_matData = cell(nF, 1);
FileName_matData = cell(nF, 1);
SSS = cell(nF, 1);

nF = 10;
for n = 1:nF
    display(['Pr
    
    Path_matData{n} = fullfile(path_matData_nonVG, T_Patient.folder_Patient{n});
    if ~exist(Path_matData{n}, 'dir')
        mkdir(Path_matData{n});
    end
    
    path_Struct = fullfile(path_nonVG, T_Patient.folder_Patient{n}, T_Patient.folder_Fraction{n});
    junk = dir(fullfile(path_Struct, '*STRUCT*'));
    if isempty(junk)
        FileName_Struct{n} = [];
        Path_matData{n} = [];
        FileName_matData{n} = [];
    else
    
        junk = junk(1);
        ffn_Struct = fullfile(junk.folder, junk.name);
        FileName_Struct{n} = junk.name;

        SS = [];
        SSS{n} = 0;
        try
            di = dicominfo(ffn_Struct, 'UseVRHeuristic', false);
            SS = dicomContours(di);
            SSS{n} = 1;
        catch ME
        end
        FileName_matData{n} = ['SS_', T_Patient.folder_Fraction{n}, '.mat'];
        ffn_mat = fullfile(Path_matData{n}, FileName_matData{n});
        save(ffn_mat, 'SS')
    end
end
T_Mat = table(FileName_Struct, FileName_matData, SSS);    
fn = ['MatTable_', folder_nonVG];    
save(fn, 'T_Mat', 'path_matData_nonVG')


iFail = 0;
for n = 7%1:length(fd_pt)
    ffd = fullfile(fd_pt(n).folder, fd_pt(n).name);
    junk = dir(ffd);
    fd_P =junk(~ismember({junk(:).name},{'.','..'}));
    
    % Final
    
%     ind = find(contains({fd_P.name}, '_f', 'IgnoreCase',true));
    ind = find(contains({fd_P.name}, '_', 'IgnoreCase',true));
    for nn = 1:length(ind)
        
        m = ind(nn);
        matFN = fullfile(Path_matData, ['SS_', fd_P(m).name, '.mat']);
        
        if bProcessAll
            bGo = 1;
        else
            failMatFN = failTT.failMatFileName;
%             display(['Patient ', num2str(n), '/', num2str(length(fd_pt)),...
%                 ',  Fraction ', num2str(nn), '/', num2str(length(ind)), ' was already done...']);

            if any(contains(failMatFN, matFN))
                bGo = 1;
            end
        end
        
        if bGo
            
            display(['Processing Patient ', num2str(n), '/', num2str(length(fd_pt)),...
                ',  Fraction ', num2str(nn), '/', num2str(length(ind)), '...']);

            ffd = fullfile(fd_P(m).folder, fd_P(m).name);

            % RTStruct file
            junk = dir(fullfile(ffd, '*STRUCT*'));
            junk = junk(1);
            ffn = fullfile(junk.folder, junk.name);
            SS = [];

            % size
            junk = dir(ffn);
            filesize = junk.bytes;
            
            if filesize > 2^20*100
                display('......Structure file might be corrupted since its size is larger than 100MB');
                iFail = iFail+1;
                [junk1, junk2, ~] = fileparts(ffn);
                failFilePath{iFail} = junk1;
                failFileName{iFail} = junk2;
                failReason{iFail} = 'File size too large';
                failMatFileName{iFail} = matFN; 
            else
                di = dicominfo(ffn, 'UseVRHeuristic', false);
       %         plan = load_structure_from_dicom(ffn);
        % 
        %         SS.Names = plan.structureData.names;
        %         SS.structures = plan.structureData.structures;
                try
                    SS = dicomContours(di);
                catch ME
        %             rethrow(ME);
        %             warning('Problem using function.  Assigning a value of 0.');
                end
            end
            save(matFN, 'SS')
            ptMatFile(n).matFN(nn).matFN = matFN;
            ptMatFile(n).matFN(nn).bSSEmpty = isempty(SS);
            
            bGo = 0;
        end
    end
end

% 
% save(ptMatInfoFN, 'ptMatFile')
% 
% failFilePath = failFilePath';
% failFileName = failFileName';
% failReason = failReason';
% failMatFileName = failMatFileName';
% 
% failTT = table(failFilePath, failFileName, failReason, failMatFileName);
% junk = [fdName_nonVG, '_failTT.xlsx'];
% writetable(failTT, junk);
% 
% save(failSSFN, 'failTT');