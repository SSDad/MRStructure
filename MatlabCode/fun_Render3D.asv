function [BW3, param3D, STNames, CLR] = fun_Render3D(matffn, matfd, FractionName, iFig, bFinal, param3D, CamView)

[contData] = fun_getContourData(matffn);
CMR = contData.CMR;
ST = contData.ST;

if bFinal
    % xyz range
    xyzMin = min(cell2mat({CMR.sliceC.Min}'));
    xyzMax = max(cell2mat({CMR.sliceC.Max}'));
    for iST = 1:length(ST)
        STNames{iST} = ST(iST).sName;
        if ~isempty(ST(iST).sName)
            xyzMin = [xyzMin; cell2mat({ST(iST).sliceC.Min}')];
            xyzMax = [xyzMax; cell2mat({ST(iST).sliceC.Max}')];
        end
    end
    junk = min(xyzMin);
    XMin = junk(1);
    YMin = junk(2);
    ZMin = junk(3);
    junk = max(xyzMax);
    XMax = junk(1);
    YMax = junk(2);
    ZMax = junk(3);

    % grid
    dx = 1;
    dy = 1;
    zzF = [CMR.sliceC.z]';
    dz = zzF(2)-zzF(1);
    dxyz = [dx dy dz];

    junk = dz*1; % margin added
    x1 = floor(XMin-junk);
    x2 = ceil(XMax+junk);
    y1 = floor(YMin-junk);
    y2 = ceil(YMax+junk);
    z1 = ZMin - junk;
    z2 = ZMax +junk;
    xyzLim = [x1 x2 y1 y2 z1 z2];

    N = round((x2-x1)/dx)+1;
    M = round((y2-y1)/dy)+1;
    P = round((z2-z1)/dz)+1;
    MNP = [M N P];

    [xg, yg, zg] = meshgrid(x1:dx:x2, y1:dy:y2, linspace(z1, z2, P));
    
    param3D.zzP = linspace(z1, z2, P);
    param3D.dxyz = dxyz;
    param3D.xyzLim = xyzLim;
    param3D.MNP = MNP;
    param3D.xg = xg;
    param3D.yg = yg;
    param3D.zg = zg;
else
    zzP = param3D.zzP;
    dxyz = param3D.dxyz;
    xyzLim = param3D.xyzLim;
    MNP = param3D.MNP;
    xg = param3D.xg;
    yg = param3D.yg;
    zg = param3D.zg;
    
    % xyz shift
    shftffn = fullfile(matfd, 'shft.mat');
    load (shftffn);
    iFrac = iFig-1;
    xyzShift = [shft.x(iFrac) shft.y(iFrac) shft.z(iFrac)];
    CMR = fun_xyzShift(CMR, xyzShift);
    
    for iST = 1:length(ST)
        ST(iST) = fun_xyzShift(ST(iST), xyzShift);
    end
end
% 3CMR
[BW3.CMR] = fun_get3DMask(CMR, param3D);
[f, v] = isosurface(xg, yg, zg, BW3.CMR, 0.99);

[hF, hA] = fun_addFig(iFig);
patch(hA, 'Faces', f, 'Vertices', v, 'Facecolor', CMR.Color, 'Edgecolor', 'none', 'FaceAlpha', 0.2);
hA.Title.String = FractionName;
hA.Title.Color = 'w';
hF.WindowState = 'maximized';
CLR.CMR = CMR.Color;

for iST = 1:length(ST)
    STNames{iST} = ST(iST).sName;
    if ~isempty(ST(iST).sName)
        [BW3.ST{iST}] = fun_get3DMask(ST(iST), param3D);
        [f, v] = isosurface(xg, yg, zg, BW3.ST{iST}, 0.99);
        patch(hA, 'Faces', f, 'Vertices', v, 'Facecolor', ST(iST).Color, 'Edgecolor', 'none', 'FaceAlpha', 0.5);
        CLR.ST{iST} = ST(iST).Color;
    end
end
% STNames = {ST(sST).sName}';
LText = [CMR.sName; STNames'];
L = legend(hA, LText, 'Interpreter', 'none');
L.TextColor = 'w';
L.FontSize = 16;
hA.View = CamView;
axis(hA, 'equal', 'tight')
figffn = fullfile(matfd, ['Render3D_', FractionName, '.fig']);
savefig(hF, figffn)
pngffn = fullfile(matfd, ['Render3D_', FractionName, '.png']);
saveas(hF, pngffn)